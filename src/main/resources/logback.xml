<?xml version="1.0" encoding="UTF-8"?>
<!--　scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载-->
<!--scanPeriod: 设置监测配置文件是否有修改的时间间隔,当scan为true时，此属性生效。默认的时间间隔为1分钟-->
<!--debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--日志的目录，属性可以设置多个-->
    <property name="LOG_HOME" value="../logs"/>　

    <!-- 控制台打印 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>[%d{HH:mm:ss.SSS}][%p][%c{40}][%t] %m%n</pattern>
            <!-- 此处设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志过滤器，记录DEBUG及以上级别日志  级别排序为：TRACE < DEBUG < INFO < WARN < ERROR-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <!-- 日志文件存储 -->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--被写入的文件名-->
        <File>${LOG_HOME}log.log</File>
        <!--如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true-->
        <!--<append>true</append>-->
        <encoder>
            <pattern>
                [ %-5level] [%date{yyyy-MM-dd HH:mm:ss.SSS}] %logger{96} [%line] [%thread]- %msg%n
            </pattern>
            <!-- 此处设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略,符合某个条件时，将日志记录到其他文件,属性class定义具体的滚动策略类-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- rollover daily 配置日志所生成的目录以及生成文件名的规则 -->
            <fileNamePattern>${LOG_HOME}/log_%d{yyyyMMdd}.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <!-- or whenever the file size reaches 64 MB -->
                <maxFileSize>64 MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--控制保留的归档文件的最大数量，超出数量就删除旧文件-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>


      <!--  <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>-->
        <!--如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false-->
        <!--<prudent>false</prudent>-->
    </appender>

    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${LOG_HOME}/error.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/error.log.%d{yyyy-MM-dd}.gz</fileNamePattern>
            <maxHistory>10</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>[%d{HH:mm:ss.SSS}][%p][%c{40}][%t] %m%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>


    <!--子节点loger：用来设置某一个包或具体的某一个类的日志打印级别、以及指定appender,additivity是否向上级loger传递打印信息-->
    <logger name="com.usst" additivity="false" level="INFO">
        <appender-ref ref="console"/>
    </logger>



    <!--子节点root:它也是loger元素，但是它是根loger,是所有loger的上级。
    只有一个level属性，因为name已经被命名为"root",且已经是最上级了。-->
    <root level="DEBUG">
        <!--可以包含零个或多个appender-ref元素，标识这个appender将会添加到这个loger-->
        <appender-ref ref="console"/>
        <appender-ref ref="error"/>
    </root>

</configuration>